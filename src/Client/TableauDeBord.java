/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

/*import Client.Adherents.AddAdherent;
import Client.Adherents.EditAdherent;
import Client.Adherents.JTableModelAdherent;
import Client.Bibliothecaire.AddUtilisateur;
import Client.Bibliothecaire.ConfSupprWithPass;
import Client.Bibliothecaire.EditBiblio;
import Client.Bibliothecaire.JTableModelBibliothecaire;
import Client.Emprunts.AddEmprunt;
import Client.Emprunts.JTableModelEmprunt;
import Client.Livres.AddBook;
import Client.Livres.BooleanCellRenderer;
import Client.Livres.DisponibiliteCellEditor;
import Client.Livres.EditBook;
import Client.Livres.JTableModelBooks;*/
/*import Client.Thread.Selected;
import Client.Utilisateur.JTableModelUtilisateur;
import Metier.Adherent;
import Metier.AdherentService;
import Metier.Bibliothecaire;*/
import Client.Thread.Selected;
import Client.Utilisateur.AddUtilisateur;
import Client.Utilisateur.EditUtilisateur;
import Client.Utilisateur.JTableModelUtilisateur;
import Metier.Courier;
/*import Metier.Emprunt;
import Metier.EmpruntService;
import Metier.Livre;
import Metier.LivreService;*/
import Metier.MetierServiceFactory;
import Metier.interfaces.CourierService;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Bentalha Oussama
 */
public class TableauDeBord extends javax.swing.JFrame {

    //private Bibliothecaire bibliothecaireConnecte = null;
    /*private Bibliotheque bibliotheque = MetierServiceFactory.getBibliotheque();
    private LivreService livreMetierService = MetierServiceFactory.getLivreService();
    private AdherentService adherentMetierService = MetierServiceFactory.getAdherentService();
    private EmpruntService empruntMetierService = MetierServiceFactory.getEmpruntService();*/
    private CourierService courierMetierService = MetierServiceFactory.getCourierService();
    
    /*private JTableModelBooks books = null;
    private JTableModelAdherent adherents = null;
    private JTableModelEmprunt emprunts = null;
    private JTableModelBibliothecaire bibliothecaires = null;*/
    private JTableModelUtilisateur utilisateurs = null;
    
    /*private Livre selectedL;
    private Adherent selectedA;
    private Emprunt selectedE;
    private Bibliothecaire selectedB;*/
    private Courier selectedC;

    /**
     * Creates new form TableauDeBord
     */
    public TableauDeBord() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(this.getExtendedState() | TableauDeBord.MAXIMIZED_BOTH);
        //this.bibliothecaireConnecte = this.bibliotheque.getBibliothecaireConnecte();
        /*if (this.bibliothecaireConnecte == null) {
            this.dispose();
        } else {
            jLabelBC.setText("Bibliothécaire connecté : " + bibliothecaireConnecte.getPrenom() + " " + bibliothecaireConnecte.getNom());
        }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupCritereRechercheBooks = new javax.swing.ButtonGroup();
        buttonGroupCritereRechercheAdherent = new javax.swing.ButtonGroup();
        buttonGroupCritereRechercheEmprunt = new javax.swing.ButtonGroup();
        jPanelDetails = new javax.swing.JPanel();
        jLabelBC = new javax.swing.JLabel();
        jButtonQuit = new javax.swing.JButton();
        jTabbedPanePrincipal = new javax.swing.JTabbedPane();
        jPanelMenuAdmin = new javax.swing.JPanel();
        jButtonAddCourier = new javax.swing.JButton();
        jButtonEditCourier = new javax.swing.JButton();
        jPanelBarSearchUtilisateur = new javax.swing.JPanel();
        jSeparator17 = new javax.swing.JSeparator();
        jSeparator18 = new javax.swing.JSeparator();
        jPanel6 = new javax.swing.JPanel();
        jRadioButtonIdCourier = new javax.swing.JRadioButton();
        jRadioButtonNomCourier = new javax.swing.JRadioButton();
        jRadioButtonPrenomCourier = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        jRadioButtonMailCourier = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jTextFieldSearchCourier = new javax.swing.JTextField();
        jLabelNbFoundCourier = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jSeparator20 = new javax.swing.JSeparator();
        jPanelUtilisateur = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableCourier = new javax.swing.JTable();
        jPanelUtilisateurSelected = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabelUtilisateurSelected = new javax.swing.JLabel();
        jButtonDelCourier = new javax.swing.JButton();
        jSeparator21 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Centre de gestion de la bibliothèque");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabelBC.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabelBC.setText("Utilisateur connecté : -");

        jButtonQuit.setText("Déconnexion");
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDetailsLayout = new javax.swing.GroupLayout(jPanelDetails);
        jPanelDetails.setLayout(jPanelDetailsLayout);
        jPanelDetailsLayout.setHorizontalGroup(
            jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBC, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonQuit)
                .addContainerGap())
        );
        jPanelDetailsLayout.setVerticalGroup(
            jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBC, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jButtonQuit))
                .addContainerGap())
        );

        jTabbedPanePrincipal.setBackground(new java.awt.Color(255, 0, 102));
        jTabbedPanePrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPanePrincipalMouseClicked(evt);
            }
        });

        jButtonAddCourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Admin/addAdmin.png"))); // NOI18N
        jButtonAddCourier.setText("Ajouter un coursier");
        jButtonAddCourier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCourierActionPerformed(evt);
            }
        });

        jButtonEditCourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Admin/editAdmin.png"))); // NOI18N
        jButtonEditCourier.setText("Modifier un coursier");
        jButtonEditCourier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCourierActionPerformed(evt);
            }
        });

        jSeparator17.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator18.setOrientation(javax.swing.SwingConstants.VERTICAL);

        buttonGroupCritereRechercheAdherent.add(jRadioButtonIdCourier);
        jRadioButtonIdCourier.setText("Par identifiant");

        buttonGroupCritereRechercheAdherent.add(jRadioButtonNomCourier);
        jRadioButtonNomCourier.setSelected(true);
        jRadioButtonNomCourier.setText("Par nom");

        buttonGroupCritereRechercheAdherent.add(jRadioButtonPrenomCourier);
        jRadioButtonPrenomCourier.setText("Par prénom");

        jLabel21.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel21.setText("Critères de recherches :");

        buttonGroupCritereRechercheAdherent.add(jRadioButtonMailCourier);
        jRadioButtonMailCourier.setText("Par mail");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonIdCourier)
                            .addComponent(jRadioButtonPrenomCourier))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonNomCourier)
                            .addComponent(jRadioButtonMailCourier))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonIdCourier)
                    .addComponent(jRadioButtonNomCourier))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonPrenomCourier)
                    .addComponent(jRadioButtonMailCourier))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextFieldSearchCourier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchCourierActionPerformed(evt);
            }
        });
        jTextFieldSearchCourier.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSearchCourierKeyTyped(evt);
            }
        });

        jLabelNbFoundCourier.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabelNbFoundCourier.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNbFoundCourier.setText("Aucun coursier n'a été cherché");

        jLabel20.setForeground(new java.awt.Color(255, 102, 0));
        jLabel20.setText("<- Appuyer sur Entrée");

        jLabel19.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel19.setText("Recherches :");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabelNbFoundCourier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldSearchCourier, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel20)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextFieldSearchCourier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelNbFoundCourier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelBarSearchUtilisateurLayout = new javax.swing.GroupLayout(jPanelBarSearchUtilisateur);
        jPanelBarSearchUtilisateur.setLayout(jPanelBarSearchUtilisateurLayout);
        jPanelBarSearchUtilisateurLayout.setHorizontalGroup(
            jPanelBarSearchUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBarSearchUtilisateurLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBarSearchUtilisateurLayout.setVerticalGroup(
            jPanelBarSearchUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBarSearchUtilisateurLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBarSearchUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator18)
                    .addComponent(jSeparator17)
                    .addGroup(jPanelBarSearchUtilisateurLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 51, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTableCourier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identifiant", "Nom", "Prénom", "Login"
            }
        ));
        jTableCourier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCourierMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableCourierMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTableCourier);

        javax.swing.GroupLayout jPanelUtilisateurLayout = new javax.swing.GroupLayout(jPanelUtilisateur);
        jPanelUtilisateur.setLayout(jPanelUtilisateurLayout);
        jPanelUtilisateurLayout.setHorizontalGroup(
            jPanelUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUtilisateurLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanelUtilisateurLayout.setVerticalGroup(
            jPanelUtilisateurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUtilisateurLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel24.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel24.setText("Coursier sélectionné :");

        jLabelUtilisateurSelected.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelUtilisateurSelected.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelUtilisateurSelected.setText("Aucun");

        javax.swing.GroupLayout jPanelUtilisateurSelectedLayout = new javax.swing.GroupLayout(jPanelUtilisateurSelected);
        jPanelUtilisateurSelected.setLayout(jPanelUtilisateurSelectedLayout);
        jPanelUtilisateurSelectedLayout.setHorizontalGroup(
            jPanelUtilisateurSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUtilisateurSelectedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelUtilisateurSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                    .addGroup(jPanelUtilisateurSelectedLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelUtilisateurSelected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelUtilisateurSelectedLayout.setVerticalGroup(
            jPanelUtilisateurSelectedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUtilisateurSelectedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelUtilisateurSelected, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonDelCourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/Admin/delAdmin.png"))); // NOI18N
        jButtonDelCourier.setText("Supprimer un coursier");
        jButtonDelCourier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDelCourierMouseClicked(evt);
            }
        });
        jButtonDelCourier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDelCourierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMenuAdminLayout = new javax.swing.GroupLayout(jPanelMenuAdmin);
        jPanelMenuAdmin.setLayout(jPanelMenuAdminLayout);
        jPanelMenuAdminLayout.setHorizontalGroup(
            jPanelMenuAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMenuAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator21)
                    .addComponent(jPanelUtilisateur, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelBarSearchUtilisateur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMenuAdminLayout.createSequentialGroup()
                        .addComponent(jButtonAddCourier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonEditCourier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDelCourier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelUtilisateurSelected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator20))
                .addContainerGap())
        );
        jPanelMenuAdminLayout.setVerticalGroup(
            jPanelMenuAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuAdminLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMenuAdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonDelCourier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(jButtonEditCourier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelUtilisateurSelected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAddCourier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBarSearchUtilisateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelUtilisateur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPanePrincipal.addTab("Administration", jPanelMenuAdmin);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPanePrincipal)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPanePrincipal))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        // TODO add your handling code here:
        //this.bibliotheque.deconnecter();
    }//GEN-LAST:event_jButtonQuitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        /*if (this.bibliothecaireConnecte == null) {
            JOptionPane.showMessageDialog(this, "Bibliothécaire inexistant ! Session invalide...", "Erreur d'authentification", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        } else {
            jLabelBC.setText("Bibliothécaire connecté : " + bibliothecaireConnecte.getPrenom() + " " + bibliothecaireConnecte.getNom());
        }
        try {
            this.createAllJTable();
        } catch (Exception ex) {
            Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
            jLabelNbFoundLivre.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
        }*/
    }//GEN-LAST:event_formWindowOpened

    private void jTabbedPanePrincipalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPanePrincipalMouseClicked
        // TODO add your handling code here:
        this.actualisation();
    }//GEN-LAST:event_jTabbedPanePrincipalMouseClicked

    private void jButtonDelCourierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDelCourierActionPerformed
        if (!jLabelUtilisateurSelected.getText().equals("Aucun")) {
            int answer = JOptionPane.showConfirmDialog(this, "<html><body>Êtes-vous sûr de vouloir supprimer <font color='#FF6666'><b>" + this.selectedC.getName() + "</b> <i>" + this.selectedC.getFirstname() + "</i></font> ?</body></html>\n");
            if (answer == 0) {
                try {
                    courierMetierService.delete(this.selectedC.getId());
                    this.actualisation();
                } catch (Exception ex) {
                    Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Attention", JOptionPane.ERROR_MESSAGE);
                }
            }  
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un utilisateur...", "Attention", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDelCourierActionPerformed

    private void jTableCourierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCourierMouseClicked
        try {
            int id = (int) utilisateurs.getValueAt(jTableCourier.getSelectedRow(), 0);
            String nom = (String) utilisateurs.getValueAt(jTableCourier.getSelectedRow(), 1);
            String prenom = (String) utilisateurs.getValueAt(jTableCourier.getSelectedRow(), 2);
            String mail = (String) utilisateurs.getValueAt(jTableCourier.getSelectedRow(), 3);
            int scheduler = (int) utilisateurs.getValueAt(jTableCourier.getSelectedRow(), 4);
            
            Courier courier = new Courier(mail, null, nom, prenom, scheduler);
            courier.setId(id);
            
            this.setCourierSelected(courier);
            jLabelUtilisateurSelected.setText("<html><body><font color='#FF6666'><b>" + courier.getName() + "</b> <i>" + courier.getFirstname()+ "</i></font> authentifié(e) par <font color='#FF6666' >" + courier.getMail() + "</font></body></html>");
        } catch (Exception ex) {
            Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTableCourierMouseClicked

    private void jTextFieldSearchCourierKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchCourierKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            String toSearch = jTextFieldSearchCourier.getText();
            if (jRadioButtonIdCourier.isSelected()) {
                try {
                    this.searchByIdCourier(toSearch);
                } catch (Exception ex) {
                    Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                    jLabelNbFoundCourier.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
                }
            } else if (jRadioButtonNomCourier.isSelected()) {
                try {
                    this.searchByNomBiblio(toSearch);
                } catch (Exception ex) {
                    Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                    jLabelNbFoundCourier.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
                }
            } else if (jRadioButtonPrenomCourier.isSelected()) {
                try {
                    this.searchByPrenomBiblio(toSearch);
                } catch (Exception ex) {
                    Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                    jLabelNbFoundCourier.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
                }
            } else if (jRadioButtonMailCourier.isSelected()) {
                try {
                    this.searchByLoginBiblio(toSearch);
                } catch (Exception ex) {
                    Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                    jLabelNbFoundCourier.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
                }
            }
        }
    }//GEN-LAST:event_jTextFieldSearchCourierKeyTyped

    private void jButtonEditCourierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditCourierActionPerformed
        if (!jLabelUtilisateurSelected.getText().equals("Aucun")) {
            try {
                EditUtilisateur editUtilisateur = new EditUtilisateur(this, true);
                editUtilisateur.setUtilisateurSelected(this.selectedC);
                editUtilisateur.setModelBiblio(utilisateurs);
                editUtilisateur.setVisible(true);
                this.actualisation();
            } catch (Exception ex) {
                Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Attention", JOptionPane.ERROR_MESSAGE);
                }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un utilisateur...", "Attention", JOptionPane.WARNING_MESSAGE);
        }
        
        /*if (!jLabelUtilisateurSelected.getText().equals("Aucun")) {
            if ((this.selectedB.getId() == MetierServiceFactory.getBibliotheque().getBibliothecaireConnecte().getId()) || (MetierServiceFactory.getBibliotheque().isSuperAdminConnected())) {
                EditBiblio editBiblio = new EditBiblio(this, true);
                editBiblio.setBibliothecaireSelected(this.selectedB);
                editBiblio.setModelBiblio(bibliothecaires);
                editBiblio.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Vous n'êtes pas autorisé à modifier ce bibliothécaire !", "Accès interdit", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un bibliothécaire...", "Attention", JOptionPane.WARNING_MESSAGE);
        }*/
    }//GEN-LAST:event_jButtonEditCourierActionPerformed

    private void jButtonAddCourierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCourierActionPerformed
        AddUtilisateur addBiblio = new AddUtilisateur(this, true);
        addBiblio.setModelBiblio(utilisateurs);
        addBiblio.setVisible(true);
    }//GEN-LAST:event_jButtonAddCourierActionPerformed

    private void jTextFieldSearchCourierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchCourierActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchCourierActionPerformed

    private void jTableCourierMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCourierMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableCourierMousePressed

    private void jButtonDelCourierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDelCourierMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDelCourierMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableauDeBord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TableauDeBord().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupCritereRechercheAdherent;
    private javax.swing.ButtonGroup buttonGroupCritereRechercheBooks;
    private javax.swing.ButtonGroup buttonGroupCritereRechercheEmprunt;
    private javax.swing.JButton jButtonAddCourier;
    private javax.swing.JButton jButtonDelCourier;
    private javax.swing.JButton jButtonEditCourier;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabelBC;
    private javax.swing.JLabel jLabelNbFoundCourier;
    private javax.swing.JLabel jLabelUtilisateurSelected;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanelBarSearchUtilisateur;
    private javax.swing.JPanel jPanelDetails;
    private javax.swing.JPanel jPanelMenuAdmin;
    private javax.swing.JPanel jPanelUtilisateur;
    private javax.swing.JPanel jPanelUtilisateurSelected;
    private javax.swing.JRadioButton jRadioButtonIdCourier;
    private javax.swing.JRadioButton jRadioButtonMailCourier;
    private javax.swing.JRadioButton jRadioButtonNomCourier;
    private javax.swing.JRadioButton jRadioButtonPrenomCourier;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JSeparator jSeparator20;
    private javax.swing.JSeparator jSeparator21;
    private javax.swing.JTabbedPane jTabbedPanePrincipal;
    private javax.swing.JTable jTableCourier;
    private javax.swing.JTextField jTextFieldSearchCourier;
    // End of variables declaration//GEN-END:variables

    public void actualisation() {
        /*if (jPanelEmprunt.isShowing()) {
            this.fireJTableEmprunt(null, null);
            jTextFieldSearchEmprunt.setText("");
            jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été cherché");
            jLabelEmpruntSelected.setText("Aucun");
            jRadioButtonEmpruntByAdherent.setSelected(true);
        } else if (jPanelLivres.isShowing()) {
            this.fireJTableBooks(null, null);
            jTextFieldSearchLivre.setText("");
            jLabelNbFoundLivre.setText("Aucun livre n'a été cherché");
            jLabelLivreSelected.setText("Aucun");
            jRadioButtonAllLivre.setSelected(true);
        } else if (jPanelAdherent.isShowing()) {
            this.fireJTableAdherents(null, null);
            jTextFieldSearchAdherent.setText("");
            jLabelNbFoundAdherent.setText("Aucun adhérent n'a été cherché");
            jLabelAdherentSelected.setText("Aucun");
            jRadioButtonNomAdherent.setSelected(true);
        } else */if (jPanelUtilisateur.isShowing()) {
            this.fireJTableCourier(null, null);
            jTextFieldSearchCourier.setText("");
            jLabelNbFoundCourier.setText("Aucun bibliothécaire n'a été cherché");
            jLabelUtilisateurSelected.setText("Aucun");
            jRadioButtonNomCourier.setSelected(true);
        }
    }

    private void createAllJTable() throws Exception {
        /*if (emprunts == null) {
            emprunts = new JTableModelEmprunt(0, Integer.parseInt((String) jComboBoxNbPerPageEmprunt.getSelectedItem()), 1);
        }
        jTableEmprunt.setModel(emprunts);
        TableRowSorter<TableModel> sorterEmprunt = new TableRowSorter<>(jTableEmprunt.getModel());
        jTableEmprunt.setRowSorter(sorterEmprunt);

        if (books == null) {
            books = new JTableModelBooks(0, Integer.parseInt((String) jComboBoxNbPerPageLivre.getSelectedItem()), 1);
        }
        jTableLivres.setModel(books);
        jTableLivres.setDefaultRenderer(Boolean.class, new BooleanCellRenderer());
        TableRowSorter<TableModel> sorterLivre = new TableRowSorter<>(jTableLivres.getModel());
        jTableLivres.setRowSorter(sorterLivre);
        jTableLivres.setDefaultEditor(Boolean.class, new DisponibiliteCellEditor());

        if (adherents == null) {
            adherents = new JTableModelAdherent(0, Integer.parseInt((String) jComboBoxNbPerPageAdherent.getSelectedItem()), 1);
        }
        jTableAdherent.setModel(adherents);
        TableRowSorter<TableModel> sorterAdherent = new TableRowSorter<>(jTableAdherent.getModel());
        jTableAdherent.setRowSorter(sorterAdherent);*/

        if (utilisateurs == null) {
            utilisateurs = new JTableModelUtilisateur();
        }
        jTableCourier.setModel(utilisateurs);
        TableRowSorter<TableModel> sorterCourier = new TableRowSorter<>(jTableCourier.getModel());
        jTableCourier.setRowSorter(sorterCourier);

        /*Selected livre = new Selected(jTableEmprunt, jLabelEmpruntSelected);
        livre.start();
        Selected adherent = new Selected(jTableAdherent, jLabelAdherentSelected);
        adherent.start();
        Selected emprunt = new Selected(jTableEmprunt, jLabelEmpruntSelected);
        emprunt.start();*/
        
        Selected utilisateur = new Selected(jTableCourier, jLabelUtilisateurSelected);
        utilisateur.start();
    }

    /*private void fireJTableBooks(List<Livre> list, Livre livre) {
        int page = Integer.parseInt(jLabelNumPageLivre.getText());
        int perpage = Integer.parseInt((String) jComboBoxNbPerPageLivre.getSelectedItem());
        int debut = (perpage * page) - perpage;
        if (list != null) {
            books = new JTableModelBooks(list, perpage, page);
            jTableLivres.setModel(books);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableLivres.getModel());
            jTableLivres.setRowSorter(sorter);
        } else if (livre != null) {
            books = new JTableModelBooks(livre, perpage, page);
            jTableLivres.setModel(books);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableLivres.getModel());
            jTableLivres.setRowSorter(sorter);
        } else {
            try {
                books = new JTableModelBooks(debut, perpage, page);
                jTableLivres.setModel(books);
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableLivres.getModel());
                jTableLivres.setRowSorter(sorter);
            } catch (Exception ex) {
                Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                jLabelNbFoundLivre.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
            }
        }
    }

    private void fireJTableAdherents(List<Adherent> list, Adherent adherent) {
        int page = Integer.parseInt(jLabelNumPageAdherent.getText());
        int perpage = Integer.parseInt((String) jComboBoxNbPerPageAdherent.getSelectedItem());
        int debut = (perpage * page) - perpage;
        if (list != null) {
            adherents = new JTableModelAdherent(list, perpage, page);
            jTableAdherent.setModel(adherents);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableAdherent.getModel());
            jTableAdherent.setRowSorter(sorter);
        } else if (adherent != null) {
            adherents = new JTableModelAdherent(adherent, perpage, page);
            jTableAdherent.setModel(adherents);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableAdherent.getModel());
            jTableAdherent.setRowSorter(sorter);
        } else {
            try {
                adherents = new JTableModelAdherent(debut, perpage, page);
                jTableAdherent.setModel(adherents);
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableAdherent.getModel());
                jTableAdherent.setRowSorter(sorter);
            } catch (Exception ex) {
                Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                jLabelNbFoundAdherent.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
            }
        }
    }

    private void fireJTableEmprunt(List<Emprunt> list, Emprunt emprunt) {
        int page = Integer.parseInt(jLabelNumPageEmprunt.getText());
        int perpage = Integer.parseInt((String) jComboBoxNbPerPageEmprunt.getSelectedItem());
        int debut = (perpage * page) - perpage;
        if (list != null) {
            emprunts = new JTableModelEmprunt(list, perpage, page);
            jTableEmprunt.setModel(emprunts);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableEmprunt.getModel());
            jTableEmprunt.setRowSorter(sorter);
        } else if (emprunt != null) {
            emprunts = new JTableModelEmprunt(emprunt, perpage, page);
            jTableEmprunt.setModel(emprunts);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableEmprunt.getModel());
            jTableEmprunt.setRowSorter(sorter);
        } else {
            try {
                emprunts = new JTableModelEmprunt(debut, perpage, page);
                jTableEmprunt.setModel(emprunts);
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableEmprunt.getModel());
                jTableEmprunt.setRowSorter(sorter);
            } catch (Exception ex) {
                Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                jLabelNbFoundEmprunt.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
            }
        }
    }*/

    private void fireJTableCourier(List<Courier> list, Courier courier) {
        /*int page = Integer.parseInt(jLabelNumPageBiblio.getText());
        int perpage = Integer.parseInt((String) jComboBoxNbPerPageBiblio.getSelectedItem());
        int debut = (perpage * page) - perpage;*/
        if (list != null) {
            utilisateurs = new JTableModelUtilisateur(list);
            jTableCourier.setModel(utilisateurs);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableCourier.getModel());
            jTableCourier.setRowSorter(sorter);
        } else if (courier != null) {
            utilisateurs = new JTableModelUtilisateur(courier);
            jTableCourier.setModel(utilisateurs);
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableCourier.getModel());
            jTableCourier.setRowSorter(sorter);
        } else {
            try {
                utilisateurs = new JTableModelUtilisateur();
                jTableCourier.setModel(utilisateurs);
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableCourier.getModel());
                jTableCourier.setRowSorter(sorter);
            } catch (Exception ex) {
                Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
                jLabelNbFoundCourier.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
            }
        }
    }

    private void searchByMotsClesLivre(String toSearch) {
        /*try {
            StringTokenizer st = new StringTokenizer(toSearch, " ");
            System.out.println(st.countTokens() + "");
            if (st.countTokens() != 0) {
                List<String> list = new ArrayList<>();
                for (int i = 0; i < st.countTokens() + 1; i++) {
                    list.add(st.nextToken());
                }
                List<Livre> byMotsClefs = livreMetierService.getByMotsClefs(list);
                if (byMotsClefs.size() > 1) {
                    jLabelNbFoundLivre.setText(byMotsClefs.size() + " livres ont été trouvés");
                    this.fireJTableBooks(byMotsClefs, null);
                } else {
                    if (byMotsClefs.size() == 1) {
                        jLabelNbFoundLivre.setText(byMotsClefs.size() + " livre a été trouvé");
                        this.fireJTableBooks(byMotsClefs, null);
                    } else {
                        jLabelNbFoundLivre.setText("Aucun livre n'a été trouvé");
                        this.fireJTableBooks(null, null);
                    }
                }
            } else {
                jLabelNbFoundLivre.setText("Aucun livre n'a été cherché");
                this.fireJTableBooks(null, null);
            }
        } catch (Exception ex) {
            Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
            jLabelNbFoundLivre.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
        }*/
    }

    private void searchByIdLivre(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            try {
                int id = Integer.parseInt(toSearch);
                Livre byId = livreMetierService.getById(id);
                if (byId != null) {
                    jLabelNbFoundLivre.setText("1 livre a été trouvé");
                    this.fireJTableBooks(null, byId);
                } else {
                    jLabelNbFoundLivre.setText("Aucun livre n'a été trouvé");
                    this.fireJTableBooks(null, null);
                }
            } catch (NumberFormatException nfe) {
                jLabelNbFoundLivre.setText("<html><body><font color='red'>Ce n'est pas un identifiant valide</font></body></html>");
            }
        } else {
            jLabelNbFoundLivre.setText("Aucun livre n'a été cherché");
            this.fireJTableBooks(null, null);
        }*/
    }

    private void searchByAutorLivre(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Livre> byAuteur = livreMetierService.getByAuteur(toSearch);
            if (byAuteur.size() > 1) {
                jLabelNbFoundLivre.setText(byAuteur.size() + " livres ont été trouvés");
                this.fireJTableBooks(byAuteur, null);
            } else {
                if (byAuteur.size() == 1) {
                    jLabelNbFoundLivre.setText(byAuteur.size() + " livre a été trouvé");
                    this.fireJTableBooks(byAuteur, null);
                } else {
                    jLabelNbFoundLivre.setText("Aucun livre n'a été trouvé");
                    this.fireJTableBooks(null, null);
                }
            }
        } else {
            jLabelNbFoundLivre.setText("Aucun livre n'a été cherché");
            this.fireJTableBooks(null, null);
        }*/
    }

    private void searchByTitleLivre(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Livre> byTitre = livreMetierService.getByTitre(toSearch);
            if (byTitre.size() > 1) {
                jLabelNbFoundLivre.setText(byTitre.size() + " livres ont été trouvés");
                this.fireJTableBooks(byTitre, null);
            } else {
                if (byTitre.size() == 1) {
                    jLabelNbFoundLivre.setText(byTitre.size() + " livre a été trouvé");
                    this.fireJTableBooks(byTitre, null);
                } else {
                    jLabelNbFoundLivre.setText("Aucun livre n'a été trouvé");
                    this.fireJTableBooks(null, null);
                }
            }
        } else {
            jLabelNbFoundLivre.setText("Aucun livre n'a été cherché");
            this.fireJTableBooks(null, null);
        }*/
    }

    private void searchByIdAdherent(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            try {
                int id = Integer.parseInt(toSearch);
                Adherent byId = adherentMetierService.getById(id);
                if (byId != null) {
                    jLabelNbFoundAdherent.setText("1 adhérent a été trouvé");
                    this.fireJTableAdherents(null, byId);
                } else {
                    jLabelNbFoundAdherent.setText("Aucun adhérent n'a été trouvé");
                    this.fireJTableAdherents(null, null);
                }
            } catch (NumberFormatException nfe) {
                jLabelNbFoundAdherent.setText("<html><body><font color='red'>Ce n'est pas un identifiant valide</font></body></html>");
            }
        } else {
            jLabelNbFoundAdherent.setText("Aucun adhérent n'a été cherché");
            this.fireJTableAdherents(null, null);
        }*/
    }

    private void searchByNomAdherent(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Adherent> byNom = adherentMetierService.getByNom(toSearch);
            if (byNom.size() > 1) {
                jLabelNbFoundAdherent.setText(byNom.size() + " adhérents ont été trouvés");
                this.fireJTableAdherents(byNom, null);
            } else {
                if (byNom.size() == 1) {
                    jLabelNbFoundAdherent.setText(byNom.size() + " adhérent a été trouvé");
                    this.fireJTableAdherents(byNom, null);
                } else {
                    jLabelNbFoundAdherent.setText("Aucun adhérent n'a été trouvé");
                    this.fireJTableAdherents(null, null);
                }
            }
        } else {
            jLabelNbFoundAdherent.setText("Aucun adhérent n'a été cherché");
            this.fireJTableAdherents(null, null);
        }*/
    }

    private void searchByPrenomAdherent(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Adherent> byPrenom = adherentMetierService.getByPrenom(toSearch);
            if (byPrenom.size() > 1) {
                jLabelNbFoundAdherent.setText(byPrenom.size() + " adhérents ont été trouvés");
                this.fireJTableAdherents(byPrenom, null);
            } else {
                if (byPrenom.size() == 1) {
                    jLabelNbFoundAdherent.setText(byPrenom.size() + " adhérent a été trouvé");
                    this.fireJTableAdherents(byPrenom, null);
                } else {
                    jLabelNbFoundAdherent.setText("Aucun adhérent n'a été trouvé");
                    this.fireJTableAdherents(null, null);
                }
            }
        } else {
            jLabelNbFoundAdherent.setText("Aucun adhérent n'a été cherché");
            this.fireJTableAdherents(null, null);
        }*/
    }

    private void searchByIdEmprunt(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            try {
                int id = Integer.parseInt(toSearch);
                Emprunt byId = empruntMetierService.getById(id);
                if (byId != null) {
                    jLabelNbFoundEmprunt.setText("1 emprunt a été trouvé");
                    this.fireJTableEmprunt(null, byId);
                } else {
                    jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été trouvé");
                    this.fireJTableEmprunt(null, null);
                }
            } catch (NumberFormatException nfe) {
                jLabelNbFoundEmprunt.setText("<html><body><font color='red'>Ce n'est pas un identifiant valide</font></body></html>");
            }
        } else {
            jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été cherché");
            this.fireJTableEmprunt(null, null);
        }*/
    }

    private void searchByAdherentEmprunt(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Adherent> byNom = adherentMetierService.getByNom(toSearch);
            List<Emprunt> byAdherent = new ArrayList<>();
            for (int i = 0; i < byNom.size(); i++) {
                byAdherent.addAll(empruntMetierService.getByAdherent(byNom.get(i)));
            }
            if (byAdherent.size() > 1) {
                jLabelNbFoundEmprunt.setText(byAdherent.size() + " emprunts ont été trouvés");
                this.fireJTableEmprunt(byAdherent, null);
            } else {
                if (byAdherent.size() == 1) {
                    jLabelNbFoundEmprunt.setText(byAdherent.size() + " emprunt a été trouvé");
                    this.fireJTableEmprunt(byAdherent, null);
                } else {
                    jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été trouvé");
                    this.fireJTableEmprunt(null, null);
                }
            }
        } else {
            jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été cherché");
            this.fireJTableEmprunt(null, null);
        }*/
    }

    private void searchByLivreEmprunt(String toSearch) throws Exception {
        /*try {
            StringTokenizer st = new StringTokenizer(toSearch, " ");
            if (st.countTokens() != 0) {
                List<String> list = new ArrayList<>();
                for (int i = 0; i < st.countTokens() + 1; i++) {
                    list.add(st.nextToken());
                }
                List<Livre> byMotsClefs = livreMetierService.getByMotsClefs(list);
                List<Emprunt> byLivre = new ArrayList<>();
                for (int i = 0; i < byMotsClefs.size(); i++) {
                    Emprunt byLivre1 = empruntMetierService.getByLivre(byMotsClefs.get(i));
                    if (byLivre1 != null) {
                        byLivre.add(byLivre1);
                    }
                }
                if (byLivre.size() > 1) {
                    jLabelNbFoundEmprunt.setText(byLivre.size() + " emprunts ont été trouvés");
                    this.fireJTableEmprunt(byLivre, null);
                } else {
                    if (byLivre.size() == 1) {
                        jLabelNbFoundEmprunt.setText(byLivre.size() + " emprunt a été trouvé");
                        this.fireJTableEmprunt(byLivre, null);
                    } else {
                        jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été trouvé");
                        this.fireJTableEmprunt(null, null);
                    }
                }
            } else {
                jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été cherché");
                this.fireJTableEmprunt(null, null);
            }
        } catch (Exception ex) {
            Logger.getLogger(TableauDeBord.class.getName()).log(Level.SEVERE, null, ex);
            jLabelNbFoundEmprunt.setText("<html><body><font color='red'>" + ex.getMessage() + "</font></body></html>");
        }*/
    }

    private void searchByDateEmprunt(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                Date parse = sdf.parse(toSearch);
                List<Emprunt> byDate = empruntMetierService.getByDate(parse);
                if (byDate.size() > 1) {
                    jLabelNbFoundEmprunt.setText(byDate.size() + " emprunts ont été trouvés");
                    this.fireJTableEmprunt(byDate, null);
                } else {
                    if (byDate.size() == 1) {
                        jLabelNbFoundEmprunt.setText(byDate.size() + " emprunt a été trouvé");
                        this.fireJTableEmprunt(byDate, null);
                    } else {
                        jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été trouvé");
                        this.fireJTableEmprunt(null, null);
                    }
                }
            } catch (ParseException e) {
                jLabelNbFoundEmprunt.setText("<html><body><font color='red'>Cette date n'est pas valide</font></body></html>");
            }
        } else {
            jLabelNbFoundEmprunt.setText("Aucun emprunt n'a été cherché");
            this.fireJTableEmprunt(null, null);
        }*/
    }

    private void searchByIdCourier(String toSearch) throws Exception {
        if (!toSearch.equals("")) {
            try {
                int id = Integer.parseInt(toSearch);
                Courier byId = courierMetierService.getById(id);
                if (byId != null) {
                    jLabelNbFoundCourier.setText("1 bibliothécaire a été trouvé");
                    this.fireJTableCourier(null, byId);
                } else {
                    jLabelNbFoundCourier.setText("Aucun bibliothécaire n'a été trouvé");
                    this.fireJTableCourier(null, null);
                }
            } catch (NumberFormatException nfe) {
                jLabelNbFoundCourier.setText("<html><body><font color='red'>Ce n'est pas un identifiant valide</font></body></html>");
            }
        } else {
            jLabelNbFoundCourier.setText("Aucun bibliothécaire n'a été cherché");
            this.fireJTableCourier(null, null);
        }
    }

    private void searchByNomBiblio(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Bibliothecaire> byNom = adherentMetierService.getBiblioByNom(toSearch);
            if (byNom.size() > 1) {
                jLabelNbFoundBiblio.setText(byNom.size() + " bibliothécaires ont été trouvés");
                this.fireJTableCourier(byNom, null);
            } else {
                if (byNom.size() == 1) {
                    jLabelNbFoundBiblio.setText(byNom.size() + " bibliothécaire a été trouvé");
                    this.fireJTableCourier(byNom, null);
                } else {
                    jLabelNbFoundBiblio.setText("Aucun bibliothécaire n'a été trouvé");
                    this.fireJTableCourier(null, null);
                }
            }
        } else {
            jLabelNbFoundBiblio.setText("Aucun bibliothécaire n'a été cherché");
            this.fireJTableCourier(null, null);
        }*/
    }

    private void searchByPrenomBiblio(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            List<Bibliothecaire> byPrenom = adherentMetierService.getBiblioByPrenom(toSearch);
            if (byPrenom.size() > 1) {
                jLabelNbFoundBiblio.setText(byPrenom.size() + " bibliothécaires ont été trouvés");
                this.fireJTableCourier(byPrenom, null);
            } else {
                if (byPrenom.size() == 1) {
                    jLabelNbFoundBiblio.setText(byPrenom.size() + " bibliothécaire a été trouvé");
                    this.fireJTableCourier(byPrenom, null);
                } else {
                    jLabelNbFoundBiblio.setText("Aucun bibliothécaire n'a été trouvé");
                    this.fireJTableCourier(null, null);
                }
            }
        } else {
            jLabelNbFoundBiblio.setText("Aucun bibliothécaire n'a été cherché");
            this.fireJTableCourier(null, null);
        }*/
    }

    private void searchByLoginBiblio(String toSearch) throws Exception {
        /*if (!toSearch.equals("")) {
            Bibliothecaire byLogin = adherentMetierService.getByLogin(toSearch);
            if (byLogin != null) {
                jLabelNbFoundBiblio.setText("1 bibliothécaire a été trouvé");
                this.fireJTableCourier(null, byLogin);
            } else {
                jLabelNbFoundBiblio.setText("Aucun bibliothécaire n'a été trouvé");
                this.fireJTableCourier(null, null);
            }
        } else {
            jLabelNbFoundBiblio.setText("Aucun bibliothécaire n'a été cherché");
            this.fireJTableCourier(null, null);
        }*/
    }

    public JTableModelUtilisateur getJTableModelUtilisateur() {
        return utilisateurs;
    }

    public JLabel getJLabelUtilisateur() {
        return jLabelUtilisateurSelected;
    }


    public void setCourierSelected(Courier courier) {
        this.selectedC = courier;
    }

    public void setStatut(String statut, String label) {
        /*if (label.equals("livre")) {
            jLabelNbFoundLivre.setText(statut);
        }
        if (label.equals("adherent")) {
            jLabelNbFoundAdherent.setText(statut);
        }
        if (label.equals("emprunt")) {
            jLabelNbFoundEmprunt.setText(statut);
        }
        if(label.equals("admin")) {
            jLabelNbFoundBiblio.setText(statut);
        }*/
    }
}